/*
 * SingNumber.c
 *
 *  Created on: 2015��8��2��
 *      Author: Song Zhi-Cheng
 */

#include "General.h"


/*	考虑地址重叠的情况
	内存重叠也分两种情况
         低地址-------------->高地址
 *
 * ①
 * 	/  des     /
 * 			/    src   /
 *
 * ②
 * 	/	src	  /
 * 		   /	des		/
 *
 * 第一种情况虽然有重叠，但不用考虑会出错，还是常规解决方法。
 * 第二种情况，由于出现重叠，这时候循环赋值会出问题。需要从后边往前循环赋值。
 *
*/
void* myMemcpy(void* des,void *src,int size){
	assert(src!=NULL && des!=NULL);
	char* ret_t = (char*)des;
	char* src_t = (char*)src;
	//注意des<src+size
	if(src<des && des<src+size){
		ret_t = ret_t+size-1;
		src_t = src_t+size-1;
		while(size--) *ret_t-- = *src_t--;
	}else{
		while(size--)	*ret_t++ = *src_t++;
	}
	return des;
}



char* myStrcpy(char* des,const char*src){
	assert(src!=NULL && des!=NULL);
	while((*des++=*src++)!='\0') ;
	*des = '\0';
	return des;
}



int singleNumber(int* nums, int numsSize) {

	int i,res = 0;
	for(i=0;i<numsSize;i++){
		res ^=nums[i];
	}
	return res;

}


int maxDepth(struct TreeNode* root) {
	if(!root) return 0;
	int leftDept,rightDept;
	leftDept = maxDepth(root->left);
	rightDept = maxDepth(root->right);

	return leftDept>rightDept?leftDept+1:rightDept+1;
}

/*
Same Tree

Given two binary trees, write a function to check if they are equal or not.

Two binary trees are considered equal if they are structurally identical and the nodes have the same value.
*/
bool isSameTree(struct TreeNode* p, struct TreeNode* q){
	if(!p&&!q) return true;
	if(p&&q)
		if(p->val != q->val)
			return false;

	if(!p&&q) return false;
	if(p&&!q) return false;

	return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
}


//一人岁数的3次方是四位数，四次方是六位数，并知道此人岁数的3次方和4次方用遍了0～9十个数字。编写一程序求此人的岁数
int getAge(int x){
	int m3 = x*x*x;
	int m4 = x*x*x*x;
	if(m3 > 9999 || m3 < 1000) return -1;
	if(m4 > 999999 || m4 < 100000) return -1;
	int arr[10];

}
